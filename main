#include <iostream>
#include "DoublyNode.h"
#include "DoublyLinkedList.h"




template <typename T>
class DoublyNode {
public:
    T Value;
    DoublyNode<T>* poprzedni;
    DoublyNode<T>* nastepny;
    DoublyNode(T value);
};



template <typename T>
class DoublyLinkedList {
private:
    int m_count;



public:
    DoublyNode<T>* Head;
    DoublyNode<T>* Tail;
    DoublyLinkedList();
    DoublyNode<T>* Get(int index);
    void insertHead(T val);
    void InsertTail(T val);
    void Insert(int index, T val);
    int Search(T val);
    void RemoveHead();
    void RemoveTail();
    void Remove(int index);
    int Count();
    void PrintList();
    void PrintListBackward();
};
template <typename T>
void DoublyLinkedList<T>::RemoveTail() {
    if (m_count == 0)
        return;



   if (m_count == 1) {
        RemoveHead();
        return;
    }



   DoublyNode<T>* node = Tail;



   Tail = Tail->poprzedni;
    Tail->nastepny = NULL;
    delete node;
    m_count--;
}
template <typename T>
void DoublyLinkedList<T>::RemoveHead() {
    if (m_count == 0)
        return;



   DoublyNode<T>* node = Head;
    Head = Head->nastepny;
    delete node;
    if (Head != NULL)
        Head->poprzedni = NULL;



   m_count--;
}
template <typename T>
void DoublyLinkedList<T>::Remove(int index) {
    if (m_count == 0)
        return;



   if (index < 0 || index >= m_count)
        return;



   if (index == 0) {
        RemoveHead();
        return;
    }
    else if (index == m_count - 1) {
        RemoveTail();
        return;
    }
    DoublyNode<T>* prevNode = Head;
    for (int i = 0; i < index - 1; ++i) {
        prevNode = prevNode->nastepny;
    }
    DoublyNode<T>* node = prevNode->nastepny;
    DoublyNode<T>* nextNode = node->nastepny;



       prevNode->nastepny = nextNode;
    nextNode->poprzedni = prevNode;
    delete node;
    m_count--;
}
template <typename T>
void DoublyLinkedList<T>::insertHead(T val) {
    DoublyNode<T>* node = new DoublyNode<T>(val);
    node->nastepny = Head;
    if (Head != NULL)
        Head->poprzedni = node;



   Head = node;
    if (m_count == 0)
        Tail = Head;



   m_count++;
}
template <typename T>
void DoublyLinkedList<T>::InsertTail(T val) {
    if (m_count == 0) {
        insertHead(val);
        return;
    }
    DoublyNode<T>* node = new DoublyNode<T>(val);
    Tail->nastepny = node;
    node->poprzedni = Tail;
    Tail = node;
    m_count++;
}
template <typename T>
void DoublyLinkedList<T>::Insert(int index, T val) {
    if (index < 0 || index > m_count)
        return;
    if (index == 0) {
        insertHead(val);
        return;
    }
    else if (index == m_count) {
        InsertTail(val);
        return;
    }
    DoublyNode<T>* prevNode = Head;
    for (int i = 0; i < index - 1; ++i) {
        prevNode = prevNode->nastepny;
    }
    DoublyNode<T>* nextNode = prevNode->nastepny;
    DoublyNode<T>* node = new DoublyNode<T>(val);



   node->nastepny = nextNode;
    node->poprzedni = prevNode;
    prevNode->nastepny = node;
    nextNode->poprzedni = node;



   m_count++;
}



using namespace std;



int main() {
    DoublyLinkedList<int> linkedList = DoublyLinkedList<int>();
    linkedList.insertHead(43);
    linkedList.insertHead(76);
    linkedList.InsertTail(43);
    linkedList.InsertTail(44);



   cout << "Pierwszy: " << endl;
    linkedList.PrintListBackward();
    cout << endl;



   linkedList.PrintListBackward();
    cout << endl;
    linkedList.Insert(4, 100);
    linkedList.Insert(3, 48);
    linkedList.Insert(0, 22);



   cout << "Drugi: " << endl;
    linkedList.PrintListBackward();
    cout << endl;



   return 0;
}
